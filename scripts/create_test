#!/usr/bin/env python

import sys
import os
import re

USAGE = """
Creates unit test for the given class and add default settings to the CMakeLists.txt files.
Make sure that the class exists

    usage:
    create_test [module::]classname
"""

TEST_TEMPLATE = """\
#include <exception>
#include <gtest/gtest.h>
#include <iostream>
#include <mpi.h>

TEST (SAMPLE_TEST, TEST_42) {
    ASSERT_EQ(42, 42);
}

int main(int argc, char** argv) {
    int result = -1;
    int rank;
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    ::testing::InitGoogleTest(&argc, argv);
    
    // suppress the output from the other ranks
    if (rank > 0) {
        ::testing::UnitTest& unit_test = *::testing::UnitTest::GetInstance();
        ::testing::TestEventListeners& listeners = unit_test.listeners();
        delete listeners.Release(listeners.default_result_printer());
        listeners.Append(new ::testing::EmptyTestEventListener);
    }
    
    try {
        result = RUN_ALL_TESTS();
    } catch (const std::exception& e) {
        std::cerr << "Test failed with exception: " << e.what() << std::endl;
    }
    MPI_Finalize();

    return result;
}
"""

CMAKE_TEMPLATE = """\
# Test for {testName}
ADD_EXECUTABLE({testName}_TEST {className}.cpp)
TARGET_LINK_LIBRARIES({testName}_TEST {namespace} gtest gtest_main ${{CMAKE_THREAD_LIBS_INIT}})
ADD_MPI_TEST({testName}_TEST {testName}_TEST 1)
"""

def camel_case_to_underscores(string):
    words = re.findall("[A-Z][^A-Z]*", string)
    if not words:
        return string

    ret = [word.lower() for word in words]
    return "_".join(ret)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(USAGE)
        sys.exit(-1)

    arg_string = sys.argv[1].split("::")
    namespaces = arg_string[:-1]
    class_name = arg_string[-1]
    path = os.path.abspath("../tests")
    test_namespace_path = os.path.join(path, *namespaces)

    # Create directory hierarchy
    try:
        os.makedirs(test_namespace_path)
    except os.error:
        pass

    # Write cmake list for adding the subdirectories
    for i, part in enumerate(namespaces):
        test_base_cmake = os.path.join(path, "CMakeLists.txt")
        base_cmake_code = "ADD_SUBDIRECTORY(%s)\n" % os.path.join(*namespaces[:i+1])

        if os.path.exists(test_base_cmake):
            with open(test_base_cmake, "r") as base_cmake_file:
                base_already_added = base_cmake_code in base_cmake_file.read()
        else:
            base_already_added = False

        if not base_already_added:
            with open(test_base_cmake, "a+") as base_cmake_file:
                base_cmake_file.write(base_cmake_code)

    # Write test template code
    with open(os.path.join(test_namespace_path, class_name + ".cpp"), "w+") as test_file:
        test_file.write(TEST_TEMPLATE)

    # Write cmake list creating test executable
    test_cmake = os.path.join(test_namespace_path, "CMakeLists.txt")
    test_name = camel_case_to_underscores(class_name)
    cmake_code = CMAKE_TEMPLATE.format(testName=test_name.upper(), className=class_name, namespace=namespaces[-1])

    if os.path.exists(test_cmake):
        with open(test_cmake, "r") as cmake_file:
            already_added = cmake_code in cmake_file.read()
    else:
        already_added = False

    if not already_added:
        with open(test_cmake, "a+") as cmake_file:
            cmake_file.write(cmake_code)
