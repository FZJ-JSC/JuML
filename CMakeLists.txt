#Project Name
PROJECT(JuML)

# Set minimum CMAKE version#
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)

# ADD MPI
FIND_PACKAGE(MPI REQUIRED)
IF (MPI_FOUND)
    SET(CMAKE_C_COMPILER ${MPI_C_COMPILER})
    SET(CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
ENDIF(MPI_FOUND)


# Set Compiler
SET(CMAKE_C_COMPILER "mpicc")
SET(CMAKE_CXX_COMPILER "mpicxx")

# COMPILER FLAGS
SET(CMAKE_CXX_FLAGS "-std=c++11 -g")
FIND_PACKAGE(Threads REQUIRED)
FIND_PACKAGE(OpenMP REQUIRED)
IF (OPENMP_FOUND)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
ENDIF(OPENMP_FOUND)

# ADD ARRAYFIRE
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")
FIND_PACKAGE(ArrayFire REQUIRED)
IF (ArrayFire_FOUND)
    INCLUDE_DIRECTORIES(${ArrayFire_INCLUDE_DIRS})
    SET(AF_LIBS ${CMAKE_THREAD_LIBS_INIT} ${ArrayFire_LIBRARIES})
ENDIF(ArrayFire_FOUND)

# ADD HDF5
FIND_PACKAGE(HDF5 REQUIRED)
IF (HDF5_FOUND)
    INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIRS})
ENDIF(HDF5_FOUND)

# DEFINE MPI TEST FUNCTION
FUNCTION(ADD_MPI_TEST NAME TEST #[[MPI_PROCS]])
    FOREACH(PROCS ${ARGN})
        SET(TEST_PARAMETERS ${MPIEXEC_NUMPROC_FLAG} ${PROCS} "./${TEST}")
        ADD_TEST(NAME ${NAME}_${PROCS} COMMAND ${MPIEXEC} ${TEST_PARAMETERS})
    ENDFOREACH()
ENDFUNCTION(ADD_MPI_TEST)

# FIND OPENCL OPTIONAL
FIND_PACKAGE(OpenCL)
IF(OpenCL_FOUND)
    ADD_DEFINITIONS(-DJUML_OPENCL)
    LIST(APPEND AF_LIBS ${OpenCL_LIBRARIES})
ENDIF(OpenCL_FOUND)

# FIND CUDA # OPTIONAL
FIND_PACKAGE(CUDA)
IF(CUDA_FOUND)
    FIND_PACKAGE(NVVM)
    ADD_DEFINITIONS(-DJUML_CUDA)
    LIST(APPEND AF_LIBS ${CUDA_LIBRARIES} ${NVVM_LIB})
ENDIF(CUDA_FOUND)

# Add thirdparty-Directory
INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}/thirdparty")

# ADD SOURCES
SET(JuML_INLUDE_DIRECTORIES ${PROJECT_SOURCE_DIR}/include)
INCLUDE_DIRECTORIES(${JuML_INLUDE_DIRECTORIES})
ADD_SUBDIRECTORY(src)

# ADD EXECUTABLES
ADD_SUBDIRECTORY(executables)

# ADD GOOGLE TEST # OPTIONAL
SET(JuML_DATA_DIRECTORY ${PROJECT_SOURCE_DIR}/datasets)
ADD_DEFINITIONS(-DJUML_DATASETS="${JuML_DATA_DIRECTORY}")
FIND_PACKAGE(GTest)
IF(GTEST_FOUND)
    INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})
    # ADD UNIT TESTS
    INCLUDE(CTest)
    ADD_SUBDIRECTORY(tests)
    ENABLE_TESTING()
    # REDEFINE VERBOSE TEST COMMAND
    ADD_CUSTOM_TARGET(vtest ${CMAKE_COMMAND}
        -E env CTEST_OUTPUT_ON_FAILURE=1
        ${CMAKE_CTEST_COMMAND} -C $<CONFIG> --verbose
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    )
ENDIF(GTEST_FOUND)

# ADD DOCUMENTATION # OPTIONAL
FIND_PACKAGE(Doxygen)
IF(DOXYGEN_FOUND)
    ADD_CUSTOM_TARGET(doc
        ${DOXYGEN_EXECUTABLE} ../doc/Doxyfile
        COMMENT "Generating API documentation with Doxygen" VERBATIM
    )
ENDIF(DOXYGEN_FOUND)

# ADD PYTHON WRAPPER # OPTIONAL
ADD_SUBDIRECTORY(python)

# WORKARAOUND TO DISPLAY HEADERS IN IDE
FILE(GLOB_RECURSE header_files "${JuML_INLUDE_DIRECTORIES}/*/*.h")
ADD_CUSTOM_TARGET(headers SOURCES ${header_files})
