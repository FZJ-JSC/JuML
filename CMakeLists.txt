#Project Name
PROJECT(JuML)

# Set minimum CMAKE version#
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)

# Set Compiler
SET(CMAKE_CXX_COMPILER "mpicxx")

# COMPILER FLAGS
SET(CMAKE_CXX_FLAGS "-std=c++0x -lhdf5 -lz")

FIND_PACKAGE(Threads)
FIND_PACKAGE(OpenMP)
if (OPENMP_FOUND)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

# DEFINE MPI TEST FUNCTION
SET(MPIEXEC "mpiexec")
SET(MPIEXEC_NUMPROC_FLAG "-np")
FUNCTION(ADD_MPI_TEST NAME TEST MPI_PROCS)
  SET(TEST_PARAMETERS ${MPIEXEC_NUMPROC_FLAG} ${MPI_PROCS} "./${TEST}")
  ADD_TEST(NAME ${TEST} COMMAND ${MPIEXEC} ${TEST_PARAMETERS})
ENDFUNCTION(ADD_MPI_TEST)

# ADD SOURCES
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
ADD_SUBDIRECTORY(src)

# ADD GOOGLE TEST
FIND_PACKAGE(GTest)

IF(GTEST_FOUND)
    INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})

    # ADD UNIT TESTS
    INCLUDE(CTest)
    ADD_SUBDIRECTORY(tests)
    ENABLE_TESTING()
    # REDEFINE VERBOSE TEST COMMAND
    ADD_CUSTOM_TARGET(vtest ${CMAKE_COMMAND} 
        -E env CTEST_OUTPUT_ON_FAILURE=1
        ${CMAKE_CTEST_COMMAND} -C $<CONFIG> --verbose
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    )
endif(GTEST_FOUND)

#ADD DOKU IF DOXYGEN HAS BEEN FOUND
FIND_PACKAGE(Doxygen)
IF(DOXYGEN_FOUND)
  ADD_CUSTOM_TARGET(doc
    ${DOXYGEN_EXECUTABLE} ../doc/Doxyfile
    COMMENT "Generating API documentation with Doxygen" VERBATIM
  )
endif(DOXYGEN_FOUND)

#ADD PYTHON WRAPPER
ADD_SUBDIRECTORY(python
)

